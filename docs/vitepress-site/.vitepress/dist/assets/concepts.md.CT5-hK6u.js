import{_ as a,c as i,o as t,ag as n}from"./chunks/framework.UtM2fnOC.js";const m=JSON.parse('{"title":"Core Concepts","description":"","frontmatter":{},"headers":[],"relativePath":"concepts.md","filePath":"concepts.md"}'),s={name:"concepts.md"};function l(o,e,r,c,h,d){return t(),i("div",null,[...e[0]||(e[0]=[n('<h1 id="core-concepts" tabindex="-1">Core Concepts <a class="header-anchor" href="#core-concepts" aria-label="Permalink to &quot;Core Concepts&quot;">​</a></h1><h2 id="auction-mechanisms" tabindex="-1">Auction Mechanisms <a class="header-anchor" href="#auction-mechanisms" aria-label="Permalink to &quot;Auction Mechanisms&quot;">​</a></h2><h3 id="uniform-price-auctions" tabindex="-1">Uniform Price Auctions <a class="header-anchor" href="#uniform-price-auctions" aria-label="Permalink to &quot;Uniform Price Auctions&quot;">​</a></h3><p>All winners pay the same clearing price, determined by the marginal bid.</p><h3 id="the-bid-shading-problem" tabindex="-1">The Bid Shading Problem <a class="header-anchor" href="#the-bid-shading-problem" aria-label="Permalink to &quot;The Bid Shading Problem&quot;">​</a></h3><p>In traditional uniform price auctions, bidders strategically underbid to maximize profits. This leads to:</p><ul><li>Inefficient allocation</li><li>Reduced seller revenue</li><li>Price manipulation by large bidders</li></ul><h3 id="our-solution-augmented-mechanisms" tabindex="-1">Our Solution: Augmented Mechanisms <a class="header-anchor" href="#our-solution-augmented-mechanisms" aria-label="Permalink to &quot;Our Solution: Augmented Mechanisms&quot;">​</a></h3><h4 id="_1-elastic-supply" tabindex="-1">1. Elastic Supply <a class="header-anchor" href="#_1-elastic-supply" aria-label="Permalink to &quot;1. Elastic Supply&quot;">​</a></h4><p>Supply adjusts dynamically based on demand:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> S₀ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">×</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> elasticity_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, parameters)</span></span></code></pre></div><h4 id="_2-advanced-tie-breaking" tabindex="-1">2. Advanced Tie-Breaking <a class="header-anchor" href="#_2-advanced-tie-breaking" aria-label="Permalink to &quot;2. Advanced Tie-Breaking&quot;">​</a></h4><p>Margin-based allocation that considers:</p><ul><li>Price aggressiveness</li><li>Quantity impact</li><li>Historical behavior</li></ul><h2 id="cfmm-settlement" tabindex="-1">CFMM Settlement <a class="header-anchor" href="#cfmm-settlement" aria-label="Permalink to &quot;CFMM Settlement&quot;">​</a></h2><h3 id="what-is-cfmm" tabindex="-1">What is CFMM? <a class="header-anchor" href="#what-is-cfmm" aria-label="Permalink to &quot;What is CFMM?&quot;">​</a></h3><p>Constant Function Market Makers (CFMMs) are automated liquidity pools that enable decentralized trading.</p><h3 id="integration-benefits" tabindex="-1">Integration Benefits <a class="header-anchor" href="#integration-benefits" aria-label="Permalink to &quot;Integration Benefits&quot;">​</a></h3><ul><li>Improved price discovery</li><li>MEV capture as user surplus</li><li>Atomic settlement guarantees</li><li>Sub-100ms execution</li></ul><h3 id="routing-optimization" tabindex="-1">Routing Optimization <a class="header-anchor" href="#routing-optimization" aria-label="Permalink to &quot;Routing Optimization&quot;">​</a></h3><p>Our system finds optimal paths across multiple pools:</p><ul><li>Minimizes price impact</li><li>Reduces gas costs</li><li>Splits orders for better execution</li></ul><h2 id="mev-protection" tabindex="-1">MEV Protection <a class="header-anchor" href="#mev-protection" aria-label="Permalink to &quot;MEV Protection&quot;">​</a></h2><h3 id="types-of-mev" tabindex="-1">Types of MEV <a class="header-anchor" href="#types-of-mev" aria-label="Permalink to &quot;Types of MEV&quot;">​</a></h3><ul><li><strong>Frontrunning</strong>: Executing before a known transaction</li><li><strong>Sandwiching</strong>: Surrounding a transaction with buy/sell orders</li><li><strong>Backrunning</strong>: Following large trades for profit</li></ul><h3 id="protection-mechanisms" tabindex="-1">Protection Mechanisms <a class="header-anchor" href="#protection-mechanisms" aria-label="Permalink to &quot;Protection Mechanisms&quot;">​</a></h3><ol><li><strong>Commit-Reveal</strong>: Hide bid details until execution</li><li><strong>Private Mempools</strong>: Bypass public transaction pools</li><li><strong>Time-Delay</strong>: Add randomness to execution timing</li></ol><h2 id="performance-targets" tabindex="-1">Performance Targets <a class="header-anchor" href="#performance-targets" aria-label="Permalink to &quot;Performance Targets&quot;">​</a></h2><ul><li>Bid submission: &lt; 5ms</li><li>Auction clearing: &lt; 10ms</li><li>Settlement: &lt; 20ms</li><li>CFMM routing: &lt; 15ms</li></ul><h2 id="next-steps" tabindex="-1">Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;Next Steps&quot;">​</a></h2><ul><li><a href="/api/augmented.html">API Reference</a></li><li><a href="/examples/basic.html">Examples</a></li><li><a href="/theory.html">Theory Deep Dive</a></li></ul>',31)])])}const p=a(s,[["render",l]]);export{m as __pageData,p as default};
